# The root of all... queries
type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node

  # Fetches objects given their IDs
  nodes(
    # The IDs of objects
    ids: [ID!]!
  ): [Node]!
  me: User
  products(
    # Returns the items in the list that come after the specified cursor.
    after: String

    # Returns the first n items from the list.
    first: Int

    # Returns the items in the list that come before the specified cursor.
    before: String

    # Returns the last n items from the list.
    last: Int
  ): ProductConnection!
  reviews(
    # Returns the items in the list that come after the specified cursor.
    after: String

    # Returns the first n items from the list.
    first: Int

    # Returns the items in the list that come before the specified cursor.
    before: String

    # Returns the last n items from the list.
    last: Int
  ): ReviewConnection!
  singleProductById(id: String!): Product
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# User data
type User implements Node {
  # The ID of an object
  id: ID!

  # mongoose _id
  _id: String!
  name: String
  email: String
  products(
    # Returns the items in the list that come after the specified cursor.
    after: String

    # Returns the first n items from the list.
    first: Int

    # Returns the items in the list that come before the specified cursor.
    before: String

    # Returns the last n items from the list.
    last: Int
  ): ProductConnection!
  reviews(
    # Returns the items in the list that come after the specified cursor.
    after: String

    # Returns the first n items from the list.
    first: Int

    # Returns the items in the list that come before the specified cursor.
    before: String

    # Returns the last n items from the list.
    last: Int
  ): ReviewConnection!
  createdAt: String
  updatedAt: String
}

# A connection to a list of items.
type ProductConnection implements Connection {
  # Number of items in this connection.
  count: Int

  # A count of the total number of objects in this connection, ignoring pagination.
  # This allows a client to fetch the first five objects by passing "5" as the
  # argument to "first", then fetch the total count so it could display "5 of 83",
  # for example.
  totalCount: Int

  # Offset from start.
  startCursorOffset: Int!

  # Offset till end.
  endCursorOffset: Int!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProductEdge]!
}

# A connection to a list of items.
interface Connection {
  # Number of items in this connection.
  count: Int

  # A count of the total number of objects in this connection, ignoring pagination.
  # This allows a client to fetch the first five objects by passing "5" as the
  # argument to "first", then fetch the total count so it could display "5 of 83",
  # for example.
  totalCount: Int

  # Offset from start.
  startCursorOffset: Int!

  # Offset till end.
  endCursorOffset: Int!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# An edge in a connection.
type ProductEdge {
  # The item at the end of the edge.
  node: Product

  # A cursor for use in pagination.
  cursor: String!
}

# Product data
type Product implements Node {
  # The ID of an object
  id: ID!

  # mongoose _id
  _id: String!
  description: String
  referenceLink: String
  name: String
  category: String
  user: User
  reviews(
    # Returns the items in the list that come after the specified cursor.
    after: String

    # Returns the first n items from the list.
    first: Int

    # Returns the items in the list that come before the specified cursor.
    before: String

    # Returns the last n items from the list.
    last: Int
  ): ReviewConnection!
  createdAt: String
  updatedAt: String
}

# A connection to a list of items.
type ReviewConnection implements Connection {
  # Number of items in this connection.
  count: Int

  # A count of the total number of objects in this connection, ignoring pagination.
  # This allows a client to fetch the first five objects by passing "5" as the
  # argument to "first", then fetch the total count so it could display "5 of 83",
  # for example.
  totalCount: Int

  # Offset from start.
  startCursorOffset: Int!

  # Offset till end.
  endCursorOffset: Int!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ReviewEdge]!
}

# An edge in a connection.
type ReviewEdge {
  # The item at the end of the edge.
  node: Review

  # A cursor for use in pagination.
  cursor: String!
}

# Review data
type Review implements Node {
  # The ID of an object
  id: ID!

  # mongoose _id
  _id: String!
  comment: String
  rating: Int
  user: User
  product: Product
  createdAt: String
  updatedAt: String
}

type Mutation {
  RegisterWithEmailMutation(
    input: UserRegisterWithEmailInput!
  ): UserRegisterWithEmailPayload
  LoginWithEmailMutation(
    input: UserLoginWithEmailInput!
  ): UserLoginWithEmailPayload
  ChangePasswordMutation(
    input: ChangeUserPasswordInput!
  ): ChangeUserPasswordPayload
  RecoverPasswordMutation(input: RecoverPasswordInput!): RecoverPasswordPayload
  CreateProductMutation(input: ProductCreateInput!): ProductCreatePayload
  DeleteProductMutation(input: ProductDeleteInput!): ProductDeletePayload
  CreateReviewMutation(
    input: CreateReviewMutationInput!
  ): CreateReviewMutationPayload
  DeleteReviewMutation(
    input: DeleteReviewMutationInput!
  ): DeleteReviewMutationPayload
}

type UserRegisterWithEmailPayload {
  token: String
  me: User

  # Default error field resolver.
  error: String

  # Default success field resolver.
  success: String
  clientMutationId: String
}

input UserRegisterWithEmailInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type UserLoginWithEmailPayload {
  token: String
  me: User

  # Default error field resolver.
  error: String

  # Default success field resolver.
  success: String
  clientMutationId: String
}

input UserLoginWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type ChangeUserPasswordPayload {
  message: String

  # Default error field resolver.
  error: String

  # Default success field resolver.
  success: String
  clientMutationId: String
}

input ChangeUserPasswordInput {
  oldPassword: String!
  newPassword: String!
  clientMutationId: String
}

type RecoverPasswordPayload {
  # Default error field resolver.
  error: String

  # Default success field resolver.
  success: String
  clientMutationId: String
}

input RecoverPasswordInput {
  email: String!
  newPassword: String!
  clientMutationId: String
}

type ProductCreatePayload {
  productEdge: ProductEdge

  # Default error field resolver.
  error: String

  # Default success field resolver.
  success: String
  clientMutationId: String
}

input ProductCreateInput {
  name: String!
  referenceLink: String
  description: String
  category: String!
  clientMutationId: String
}

type ProductDeletePayload {
  message: String

  # Default error field resolver.
  error: String

  # Default success field resolver.
  success: String
  clientMutationId: String
}

input ProductDeleteInput {
  product: String!
  clientMutationId: String
}

type CreateReviewMutationPayload {
  reviewEdge: ReviewEdge
  product: Product

  # Default error field resolver.
  error: String

  # Default success field resolver.
  success: String
  clientMutationId: String
}

input CreateReviewMutationInput {
  rating: String!
  comment: String
  product: String!
  clientMutationId: String
}

type DeleteReviewMutationPayload {
  # Default error field resolver.
  error: String

  # Default success field resolver.
  success: String
  clientMutationId: String
}

input DeleteReviewMutationInput {
  review: String!
  clientMutationId: String
}
